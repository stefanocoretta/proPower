{
  "hash": "0b7fca118d8ca90f21abc715509d306d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"02-shallow\"\nauthor: \"Stefano Coretta\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggeffects)\nlibrary(simr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: lme4\nLoading required package: Matrix\n\nAttaching package: 'Matrix'\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n\n\nAttaching package: 'simr'\n\nThe following object is masked from 'package:lme4':\n\n    getData\n\nThe following object is masked from 'package:stringr':\n\n    fixed\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshallow <- read_csv(\"data/song2020/shallow.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 6500 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): Group, ID, List, Target, Critical_Filler, Word_Nonword, Relation_ty...\ndbl (3): ACC, RT, logRT\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nshallow_l2 <- shallow |> \n  filter(Group == \"L2\", Branching == \"Left\")\n\nset.seed(9823)\nshallow_s <- shallow_l2 |> \n  distinct(ID) |> \n  slice_sample(n = 10) |> \n  inner_join(shallow_l2, by = \"ID\") |> \n  filter(Branching == \"Left\") |> \n  droplevels()\n\nsaveRDS(shallow_s, \"data/shallow_s.rds\")\nunique(shallow_s$ID)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"L2_36\" \"L2_18\" \"L2_35\" \"L2_24\" \"L2_03\" \"L2_11\" \"L2_37\" \"L2_10\" \"L2_30\"\n[10] \"L2_26\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsha_lm <- glmer(\n  ACC ~ Relation_type + (Relation_type | ID),\n  family = binomial,\n  data = shallow_l2\n)\n\nsummary(sha_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: binomial  ( logit )\nFormula: ACC ~ Relation_type + (Relation_type | ID)\n   Data: shallow_l2\n\n     AIC      BIC   logLik deviance df.resid \n   736.5    776.8   -359.3    718.5      639 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-2.7847 -0.9242  0.4295  0.6211  1.3398 \n\nRandom effects:\n Groups Name                        Variance Std.Dev. Corr       \n ID     (Intercept)                 0.79532  0.8918              \n        Relation_typeNonConstituent 0.03407  0.1846    1.00      \n        Relation_typeUnrelated      0.14092  0.3754   -1.00 -1.00\nNumber of obs: 648, groups:  ID, 36\n\nFixed effects:\n                            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)                  1.42605    0.24311   5.866 4.47e-09 ***\nRelation_typeNonConstituent -0.09972    0.27212  -0.366  0.71403    \nRelation_typeUnrelated      -0.68990    0.25174  -2.740  0.00613 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr) Rlt_NC\nRltn_typNnC -0.479       \nRltn_typUnr -0.756  0.501\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsha_lm_ext <- extend(sha_lm, along = \"ID\", n = 300)\nfixef(sha_lm_ext)[\"Relation_typeNonConstituent\"] <- -0.2\n\nfi <- \"cache/sha_lm_pow.rds\"\n\nif (file.exists(fi)) {\n  sha_lm_pow <- readRDS(fi)\n} else {\n  suppressMessages(\n    sha_lm_pow <- powerCurve(sha_lm_ext, fixed(\"Relation_typeNonConstituent\"), along = \"ID\")\n  )\n  saveRDS(sha_lm_pow, fi)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(sha_lm_pow)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPower for predictor 'Relation_typeNonConstituent', (95% confidence interval),\nby largest value of ID:\n    100:  4.80% ( 3.56,  6.31) - 54 rows\n    130: 12.10% (10.14, 14.28) - 648 rows\n    160: 21.30% (18.80, 23.97) - 1242 rows\n    190: 24.80% (22.15, 27.60) - 1836 rows\n     22: 30.80% (27.95, 33.76) - 2430 rows\n     25: 37.30% (34.29, 40.38) - 3024 rows\n     28: 40.20% (37.14, 43.31) - 3618 rows\n     39: 44.80% (41.69, 47.94) - 4212 rows\n     69: 50.40% (47.25, 53.54) - 4806 rows\n     99: 53.30% (50.15, 56.43) - 5400 rows\n\nTime elapsed: 6 h 7 m 11 s\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsha_lm_ext_2 <- extend(sha_lm, along = \"ID\", n = 1000)\nfixef(sha_lm_ext_2)[\"Relation_typeNonConstituent\"] <- -0.2\n\nfi <- \"cache/sha_lm_pow_2.rds\"\n\nif (file.exists(fi)) {\n  sha_lm_pow_2 <- readRDS(fi)\n} else {\n  suppressMessages(\n    sha_lm_pow_2 <- powerSim(sha_lm_ext_2, fixed(\"Relation_typeNonConstituent\"))\n  )\n  saveRDS(sha_lm_pow_2, fi)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(sha_lm_pow_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPower for predictor 'Relation_typeNonConstituent', (95% confidence interval):\n      97.00% (95.74, 97.97)\n\nTest: z-test\n      Effect size for Relation_typeNonConstituent is -0.20\n\nBased on 1000 simulations, (768 warnings, 0 errors)\nalpha = 0.05, nrow = 18000\n\nTime elapsed: 4 h 31 m 3 s\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}