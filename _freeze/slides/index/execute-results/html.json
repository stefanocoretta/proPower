{
  "hash": "104694041da962ff4fd883b12ebd787b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"proPower: Prospective power analyses for frequentist regression models\"\nauthor: \"Dr Stefano Coretta\"\ninstitute: \"University of Edinburgh\"\ndate: \"2025/01/23\"\nformat: \n  mono-light-revealjs:\n    theme: [default, \"custom.scss\"]\n    history: false\n    fig-align: center\nfilters:\n  - tachyonsextra\nexecute: \n  echo: false\nbibliography: references.bib\n---\n\n\n\n## Example 1: vowel duration\n\n::: box-note\n-   Data from @coretta2019f, @coretta2019i.\n\n-   Voicing effect in Manchester English.\n\n-   Mono- and di-syllabic nonce words.\n:::\n\n## Example 1: the data\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\neng_s <- readRDS(\"data/eng_s.rds\")\neng_s |> select(speaker, num_syl, voicing, v1_duration, speech_rate_c)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 720 × 5\n   speaker num_syl voicing   v1_duration speech_rate_c\n   <fct>   <fct>   <fct>           <dbl>         <dbl>\n 1 en02    di      voiced          117.         -0.650\n 2 en02    mono    voiceless        95.0        -0.908\n 3 en02    mono    voiceless       106.         -0.900\n 4 en02    di      voiced          190.         -0.750\n 5 en02    di      voiced          195.         -0.383\n 6 en02    di      voiceless       113.         -0.655\n 7 en02    mono    voiced          203.         -0.823\n 8 en02    mono    voiceless       217.         -0.534\n 9 en02    di      voiced          120.         -0.571\n10 en02    di      voiceless       147.         -0.665\n# ℹ 710 more rows\n```\n\n\n:::\n:::\n\n\n\n## Effect of voicing on vowel duration\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/eng-s-plot-1.png){width=960}\n:::\n:::\n\n\n\n## Prospective power analysis: overview\n\n::: box-tip\n1.  Determine Smallest Meaningful Effect Size (SMES).\n\n2.  Run regression model on pilot or simulated data.\n\n3.  Extend model with `simr::extend()` and set coefficient to SMES.\n\n4.  Run power calculation with `simr::powerCurve()`.\n:::\n\n## Smallest Meaningful Effect Size\n\n::: box-note\n-   The minimum standard deviation for measurements of vowel duration is between 2 to 5 ms [@allen1978].\n\n-   @nowak2006 finds an effect of voicing of 4.5 ms.\n\n-   Let's set the SMES to 5 ms.\n:::\n\n## Smallest Meaningful Effect Size (ratios)\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/smes-1.png){width=960}\n:::\n:::\n\n\n\n## Run regression model\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndur_lm <- lmer(\n  log(v1_duration) ~\n    voicing + num_syl + voicing:num_syl + speech_rate_c +\n    (voicing | speaker),\n  data = eng_s\n)\n```\n:::\n\n\n\n## Extend model and set SMES\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndur_lm_ext <- extend(dur_lm, along = \"speaker\", n = 20)\n\nfixef(dur_lm_ext)[\"voicingvoiced:num_sylmono\"] <- 0.03\n```\n:::\n\n\n\n## Run power analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(simr)\n\ndur_lm_pow <- powerCurve(\n  dur_lm_ext,\n  fixed(\"voicing:num_syl\"),\n  along = \"speaker\",\n  breaks = c(50, 70, 100)\n)\n\nprint(dur_lm_pow)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nPower for predictor 'voicing:num_syl', (95% confidence interval),\nby number of levels in speaker:\n     50: 83.30% (80.84, 85.56) - 6000 rows\n     70: 92.90% (91.13, 94.41) - 8400 rows\n    100: 98.90% (98.04, 99.45) - 12000 rows\n\nTime elapsed: 1 h 12 m 47 s\n```\n\n\n:::\n:::\n\n\n\n## Power curve plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/power-curve-1.png){width=960}\n:::\n:::\n\n\n\n## Example 2: accuracy\n\n::: box-note\n-   Data from @song2020.\n\n-   Shallow morphological representation in L2 speakers.\n\n-   **Lexical decision task**: Is the word a real English word or not?\n\n-   **Priming paradigm**:\n\n    -   **Prime**: *prolong* (unrelated), *unkind* (constituent), *kindness* (non-constituent).\n\n    -   **Target**: *unkindness* (*\\[un-kind\\]-ness*, not *un-\\[kind-ness\\]*).\n\n-   Constituent vs non-constituent accuracy in L2 speakers.\n:::\n\n## Example 2: the data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshallow_s <- readRDS(\"data/shallow_s.rds\")\nshallow_s\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 180 × 11\n   ID    Group List  Target         ACC    RT logRT Critical_Filler Word_Nonword\n   <chr> <chr> <chr> <chr>        <dbl> <dbl> <dbl> <chr>           <chr>       \n 1 L2_36 L2    D     unholiness       1   878  6.78 Critical        Word        \n 2 L2_36 L2    D     rehydratable     1  1263  7.14 Critical        Word        \n 3 L2_36 L2    D     unclearness      1  1296  7.17 Critical        Word        \n 4 L2_36 L2    D     resellable       1  1344  7.20 Critical        Word        \n 5 L2_36 L2    D     unsharpness      0  1192  7.08 Critical        Word        \n 6 L2_36 L2    D     reattachable     1   969  6.88 Critical        Word        \n 7 L2_36 L2    D     uncleverness     0   835  6.73 Critical        Word        \n 8 L2_36 L2    D     unwariness       1  1028  6.94 Critical        Word        \n 9 L2_36 L2    D     reclosable       1  1028  6.94 Critical        Word        \n10 L2_36 L2    D     reusable         1   814  6.70 Critical        Word        \n# ℹ 170 more rows\n# ℹ 2 more variables: Relation_type <chr>, Branching <chr>\n```\n\n\n:::\n:::\n\n\n\n## Accuracy by relation type\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/shall-plot-1.png){width=960}\n:::\n:::\n\n\n\n## Smallest Meaningful Effect Size\n\n::: box-note\n-   I have no idea...\n\n-   Say -0.2 (log-odds).\n:::\n\n## Smallest Meaningfull Effect Size\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/prob-diff-1.png){width=960}\n:::\n:::\n\n\n\n## Run regression model\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsha_lm <- glmer(\n  ACC ~ Relation_type + (Relation_type | ID),\n  family = binomial,\n  data = shallow_s\n)\n\nsummary(sha_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: binomial  ( logit )\nFormula: ACC ~ Relation_type + (Relation_type | ID)\n   Data: shallow_s\n\n     AIC      BIC   logLik deviance df.resid \n   243.9    272.7   -113.0    225.9      171 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.8220 -1.1732  0.5994  0.7376  0.9667 \n\nRandom effects:\n Groups Name                        Variance Std.Dev. Corr       \n ID     (Intercept)                 0.5606   0.7487              \n        Relation_typeNonConstituent 0.1617   0.4022   -1.00      \n        Relation_typeUnrelated      0.2396   0.4895   -1.00  1.00\nNumber of obs: 180, groups:  ID, 10\n\nFixed effects:\n                              Estimate Std. Error z value Pr(>|z|)  \n(Intercept)                  0.8699404  0.3904283   2.228   0.0259 *\nRelation_typeNonConstituent  0.0008542  0.4401554   0.002   0.9985  \nRelation_typeUnrelated      -0.3867280  0.4379963  -0.883   0.3773  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr) Rlt_NC\nRltn_typNnC -0.730       \nRltn_typUnr -0.777  0.596\noptimizer (Nelder_Mead) convergence code: 0 (OK)\nModel failed to converge with max|grad| = 0.00637234 (tol = 0.002, component 1)\n```\n\n\n:::\n:::\n\n\n\n## Run power analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsha_lm_ext <- extend(sha_lm, along = \"ID\", n = 300)\nfixef(sha_lm_ext)[\"Relation_typeNonConstituent\"] <- -0.2\n\nsha_lm_pow <- powerCurve(sha_lm_ext, fixed(\"Relation_typeNonConstituent\"), along = \"ID\")\nprint(sha_lm_pow)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nPower for predictor 'Relation_typeNonConstituent', (95% confidence interval),\nby largest value of ID:\n    100:  4.80% ( 3.56,  6.31) - 54 rows\n    130: 12.10% (10.14, 14.28) - 648 rows\n    160: 21.30% (18.80, 23.97) - 1242 rows\n    190: 24.80% (22.15, 27.60) - 1836 rows\n     22: 30.80% (27.95, 33.76) - 2430 rows\n     25: 37.30% (34.29, 40.38) - 3024 rows\n     28: 40.20% (37.14, 43.31) - 3618 rows\n     39: 44.80% (41.69, 47.94) - 4212 rows\n     69: 50.40% (47.25, 53.54) - 4806 rows\n     99: 53.30% (50.15, 56.43) - 5400 rows\n\nTime elapsed: 6 h 7 m 11 s\n```\n\n\n:::\n:::\n\n\n\n## Try with 1000 participants\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsha_lm_ext_2 <- extend(sha_lm, along = \"ID\", n = 1000)\nfixef(sha_lm_ext_2)[\"Relation_typeNonConstituent\"] <- -0.2\n\nsha_lm_pow_2 <- powerSim(sha_lm_ext_2, fixed(\"Relation_typeNonConstituent\"))\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nPower for predictor 'Relation_typeNonConstituent', (95% confidence interval):\n      97.00% (95.74, 97.97)\n\nTest: z-test\n      Effect size for Relation_typeNonConstituent is -0.20\n\nBased on 1000 simulations, (768 warnings, 0 errors)\nalpha = 0.05, nrow = 18000\n\nTime elapsed: 4 h 31 m 3 s\n```\n\n\n:::\n:::\n\n\n\n## References\n\n::: {#refs}\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}